/*!
 * SaaS-sa-Fraas
 * Copyright Â© 2025 Digital Minion (digitalminion.com)
 * 
 * Repository: https://github.com/digitalminion/SaaS-sa-Fraas
 * Author: @dataminion
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
 // Proceed with caution if making changes to this file.
@use 'sass:map';
@use '@angular/material' as mat;

$_palettes: (
  primary: (
    0: #000000,
    10: #22005d,
    20: #381e72,
    25: #432b7e,
    30: #4f378a,
    35: #5b4397,
    40: #6750a4,
    50: #8069bf,
    60: #9a83db,
    70: #b69df7,
    80: #cfbcff,
    90: #e9ddff,
    95: #f6eeff,
    98: #fdf7ff,
    99: #fffbff,
    100: #ffffff,
  ),
  secondary: (
    0: #000000,
    10: #1f1635,
    20: #342b4b,
    25: #3f3657,
    30: #4b4263,
    35: #574d6f,
    40: #63597c,
    50: #7c7296,
    60: #968bb1,
    70: #b1a5cc,
    80: #cdc0e9,
    90: #e9ddff,
    95: #f6eeff,
    98: #fdf7ff,
    99: #fffbff,
    100: #ffffff,
  ),
  tertiary: (
    0: #000000,
    10: #3c002b,
    20: #5a1243,
    25: #681e4f,
    30: #752a5b,
    35: #843667,
    40: #924274,
    50: #af5a8e,
    60: #cd73a8,
    70: #eb8dc4,
    80: #ffaedb,
    90: #ffd8ea,
    95: #ffecf3,
    98: #fff8f8,
    99: #fffbff,
    100: #ffffff,
  ),
  neutral: (
    0: #000000,
    10: #1d1b20,
    20: #322f35,
    25: #3d3a41,
    30: #48464c,
    35: #545158,
    40: #605d64,
    50: #79767d,
    60: #938f96,
    70: #aea9b1,
    80: #cac5cc,
    90: #e6e0e9,
    95: #f5eff7,
    98: #fdf7ff,
    99: #fffbff,
    100: #ffffff,
    4: #0f0d13,
    6: #141218,
    12: #211f24,
    17: #2b292f,
    22: #36343a,
    24: #3b383e,
    87: #ded8e0,
    92: #ece6ee,
    94: #f2ecf4,
    96: #f8f2fa,
  ),
  neutral-variant: (
    0: #000000,
    10: #1d1a24,
    20: #322f3a,
    25: #3d3a45,
    30: #494551,
    35: #55505c,
    40: #615c69,
    50: #7a7582,
    60: #948e9c,
    70: #afa9b7,
    80: #cbc4d2,
    90: #e7e0ee,
    95: #f5eefd,
    98: #fdf7ff,
    99: #fffbff,
    100: #ffffff,
  ),
  error: (
    0: #000000,
    10: #410002,
    20: #690005,
    25: #7e0007,
    30: #93000a,
    35: #a80710,
    40: #ba1a1a,
    50: #de3730,
    60: #ff5449,
    70: #ff897d,
    80: #ffb4ab,
    90: #ffdad6,
    95: #ffedea,
    98: #fff8f7,
    99: #fffbff,
    100: #ffffff,
  ),
);

$_rest: (
  secondary: map.get($_palettes, secondary),
  neutral: map.get($_palettes, neutral),
  neutral-variant: map.get($_palettes,  neutral-variant),
  error: map.get($_palettes, error),
);

$primary-palette: map.merge(map.get($_palettes, primary), $_rest);
$tertiary-palette: map.merge(map.get($_palettes, tertiary), $_rest);

@function _high-contrast-value($light, $dark, $theme-type) {
  @if ($theme-type == light) {
    @return $light;
  }
  @if ($theme-type == dark) {
    @return $dark;
  }
  @if ($theme-type == color-scheme) {
    @return light-dark(#{$light}, #{$dark});
  }
  
  @error 'Unknown theme-type #{$theme-type}. Expected light, dark, or color-scheme';
}

@mixin high-contrast-overrides($theme-type) {
  @include mat.theme-overrides((
    primary: _high-contrast-value(#33196e, #f5edff, $theme-type),
    on-primary: _high-contrast-value(#ffffff, #000000, $theme-type),
    primary-container: _high-contrast-value(#513a8d, #ccb8ff, $theme-type),
    on-primary-container: _high-contrast-value(#ffffff, #0f0033, $theme-type),
    inverse-primary: _high-contrast-value(#cfbcff, #50398b, $theme-type),
    primary-fixed: _high-contrast-value(#513a8d, #e9ddff, $theme-type),
    primary-fixed-dim: _high-contrast-value(#3a2174, #cfbcff, $theme-type),
    on-primary-fixed: _high-contrast-value(#ffffff, #000000, $theme-type),
    on-primary-fixed-variant: _high-contrast-value(#ffffff, #160042, $theme-type),
    secondary: _high-contrast-value(#302747, #f5edff, $theme-type),
    on-secondary: _high-contrast-value(#ffffff, #000000, $theme-type),
    secondary-container: _high-contrast-value(#4d4465, #c9bde5, $theme-type),
    on-secondary-container: _high-contrast-value(#ffffff, #0e0624, $theme-type),
    secondary-fixed: _high-contrast-value(#4d4465, #e9ddff, $theme-type),
    secondary-fixed-dim: _high-contrast-value(#362e4d, #cdc0e9, $theme-type),
    on-secondary-fixed: _high-contrast-value(#ffffff, #000000, $theme-type),
    on-secondary-fixed-variant: _high-contrast-value(#ffffff, #140b2a, $theme-type),
    tertiary: _high-contrast-value(#540c3f, #ffebf3, $theme-type),
    on-tertiary: _high-contrast-value(#ffffff, #000000, $theme-type),
    tertiary-container: _high-contrast-value(#782d5e, #ffa8d9, $theme-type),
    on-tertiary-container: _high-contrast-value(#ffffff, #1f0015, $theme-type),
    tertiary-fixed: _high-contrast-value(#782d5e, #ffd8ea, $theme-type),
    tertiary-fixed-dim: _high-contrast-value(#5d1446, #ffaedb, $theme-type),
    on-tertiary-fixed: _high-contrast-value(#ffffff, #000000, $theme-type),
    on-tertiary-fixed-variant: _high-contrast-value(#ffffff, #29001d, $theme-type),
    background: _high-contrast-value(#fdf7ff, #141218, $theme-type),
    on-background: _high-contrast-value(#1d1b20, #e6e0e9, $theme-type),
    surface: _high-contrast-value(#fdf7ff, #141218, $theme-type),
    surface-dim: _high-contrast-value(#bcb7bf, #141218, $theme-type),
    surface-bright: _high-contrast-value(#fdf7ff, #524f55, $theme-type),
    surface-container-lowest: _high-contrast-value(#ffffff, #000000, $theme-type),
    surface-container: _high-contrast-value(#e6e0e9, #322f35, $theme-type),
    surface-container-high: _high-contrast-value(#d8d2da, #3d3a41, $theme-type),
    surface-container-highest: _high-contrast-value(#cac5cc, #48464c, $theme-type),
    on-surface: _high-contrast-value(#000000, #ffffff, $theme-type),
    shadow: _high-contrast-value(#000000, #000000, $theme-type),
    scrim: _high-contrast-value(#000000, #000000, $theme-type),
    surface-tint: _high-contrast-value(#6750a4, #cfbcff, $theme-type),
    inverse-surface: _high-contrast-value(#322f35, #e6e0e9, $theme-type),
    inverse-on-surface: _high-contrast-value(#ffffff, #000000, $theme-type),
    outline: _high-contrast-value(#2e2a35, #f5edfc, $theme-type),
    outline-variant: _high-contrast-value(#4b4753, #c7c0ce, $theme-type),
    error: _high-contrast-value(#600004, #ffece9, $theme-type),
    on-error: _high-contrast-value(#ffffff, #000000, $theme-type),
    error-container: _high-contrast-value(#98000a, #ffaea4, $theme-type),
    on-error-container: _high-contrast-value(#ffffff, #220001, $theme-type),
    surface-variant: _high-contrast-value(#e7e0ee, #494551, $theme-type),
    on-surface-variant: _high-contrast-value(#000000, #ffffff, $theme-type),
  ))
 }

 $theme: (
  primary: map.merge(map.get($_palettes, primary), $_rest),
  tertiary: map.merge(map.get($_palettes, tertiary), $_rest),
  secondary: map.get($_palettes, secondary),
  neutral: map.get($_palettes, neutral),
  neutral-variant: map.get($_palettes,  neutral-variant),
  error: map.get($_palettes, error),
);